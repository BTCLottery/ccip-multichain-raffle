/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface BTCLCoreFixedInterface extends utils.Interface {
  functions: {
    "BITMASK_LAST_INDEX()": FunctionFragment;
    "BITMASK_PURCHASER()": FunctionFragment;
    "BITPOS_LAST_INDEX()": FunctionFragment;
    "calculateRewards(uint256,uint256,uint256)": FunctionFragment;
    "checkUpkeepVRF(uint8,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BITMASK_LAST_INDEX"
      | "BITMASK_PURCHASER"
      | "BITPOS_LAST_INDEX"
      | "calculateRewards"
      | "checkUpkeepVRF"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BITMASK_LAST_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BITMASK_PURCHASER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BITPOS_LAST_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeepVRF",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "BITMASK_LAST_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BITMASK_PURCHASER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BITPOS_LAST_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeepVRF",
    data: BytesLike
  ): Result;

  events: {
    "LotteryClosed(uint256,uint256,uint256)": EventFragment;
    "LotteryOpened(uint256)": EventFragment;
    "TicketsPurchased(uint256,address,uint256,uint256,uint256)": EventFragment;
    "TokensLiquified(uint256,uint256,uint256)": EventFragment;
    "TreasuryClaimedMulti(address,uint256[])": EventFragment;
    "TreasuryClaimedSingle(address,uint256)": EventFragment;
    "WinnerClaimedPrizeMulti(address,uint256[])": EventFragment;
    "WinnerClaimedPrizeSingle(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LotteryClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LotteryOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketsPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensLiquified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryClaimedMulti"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryClaimedSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnerClaimedPrizeMulti"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnerClaimedPrizeSingle"): EventFragment;
}

export interface LotteryClosedEventObject {
  roundNr: BigNumber;
  totalTickets: BigNumber;
  totalPlayers: BigNumber;
}
export type LotteryClosedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LotteryClosedEventObject
>;

export type LotteryClosedEventFilter = TypedEventFilter<LotteryClosedEvent>;

export interface LotteryOpenedEventObject {
  roundNr: BigNumber;
}
export type LotteryOpenedEvent = TypedEvent<
  [BigNumber],
  LotteryOpenedEventObject
>;

export type LotteryOpenedEventFilter = TypedEventFilter<LotteryOpenedEvent>;

export interface TicketsPurchasedEventObject {
  roundNr: BigNumber;
  player: string;
  amount: BigNumber;
  totalBets: BigNumber;
  totalTickets: BigNumber;
}
export type TicketsPurchasedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  TicketsPurchasedEventObject
>;

export type TicketsPurchasedEventFilter =
  TypedEventFilter<TicketsPurchasedEvent>;

export interface TokensLiquifiedEventObject {
  amountToken: BigNumber;
  amountETH: BigNumber;
  liquidity: BigNumber;
}
export type TokensLiquifiedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  TokensLiquifiedEventObject
>;

export type TokensLiquifiedEventFilter = TypedEventFilter<TokensLiquifiedEvent>;

export interface TreasuryClaimedMultiEventObject {
  player: string;
  amount: BigNumber[];
}
export type TreasuryClaimedMultiEvent = TypedEvent<
  [string, BigNumber[]],
  TreasuryClaimedMultiEventObject
>;

export type TreasuryClaimedMultiEventFilter =
  TypedEventFilter<TreasuryClaimedMultiEvent>;

export interface TreasuryClaimedSingleEventObject {
  player: string;
  amount: BigNumber;
}
export type TreasuryClaimedSingleEvent = TypedEvent<
  [string, BigNumber],
  TreasuryClaimedSingleEventObject
>;

export type TreasuryClaimedSingleEventFilter =
  TypedEventFilter<TreasuryClaimedSingleEvent>;

export interface WinnerClaimedPrizeMultiEventObject {
  player: string;
  rounds: BigNumber[];
}
export type WinnerClaimedPrizeMultiEvent = TypedEvent<
  [string, BigNumber[]],
  WinnerClaimedPrizeMultiEventObject
>;

export type WinnerClaimedPrizeMultiEventFilter =
  TypedEventFilter<WinnerClaimedPrizeMultiEvent>;

export interface WinnerClaimedPrizeSingleEventObject {
  player: string;
  rounds: BigNumber;
}
export type WinnerClaimedPrizeSingleEvent = TypedEvent<
  [string, BigNumber],
  WinnerClaimedPrizeSingleEventObject
>;

export type WinnerClaimedPrizeSingleEventFilter =
  TypedEventFilter<WinnerClaimedPrizeSingleEvent>;

export interface BTCLCoreFixed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BTCLCoreFixedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BITMASK_LAST_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    BITMASK_PURCHASER(overrides?: CallOverrides): Promise<[BigNumber]>;

    BITPOS_LAST_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateRewards(
      totalWinners: PromiseOrValue<BigNumberish>,
      totalAmount: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { rewards: BigNumber[] }>;

    checkUpkeepVRF(
      status: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BigNumberish>,
      totalBets: PromiseOrValue<BigNumberish>,
      maxPlayers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  BITMASK_LAST_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  BITMASK_PURCHASER(overrides?: CallOverrides): Promise<BigNumber>;

  BITPOS_LAST_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  calculateRewards(
    totalWinners: PromiseOrValue<BigNumberish>,
    totalAmount: PromiseOrValue<BigNumberish>,
    decimals: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  checkUpkeepVRF(
    status: PromiseOrValue<BigNumberish>,
    requestId: PromiseOrValue<BigNumberish>,
    totalBets: PromiseOrValue<BigNumberish>,
    maxPlayers: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    BITMASK_LAST_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    BITMASK_PURCHASER(overrides?: CallOverrides): Promise<BigNumber>;

    BITPOS_LAST_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRewards(
      totalWinners: PromiseOrValue<BigNumberish>,
      totalAmount: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    checkUpkeepVRF(
      status: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BigNumberish>,
      totalBets: PromiseOrValue<BigNumberish>,
      maxPlayers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "LotteryClosed(uint256,uint256,uint256)"(
      roundNr?: null,
      totalTickets?: null,
      totalPlayers?: null
    ): LotteryClosedEventFilter;
    LotteryClosed(
      roundNr?: null,
      totalTickets?: null,
      totalPlayers?: null
    ): LotteryClosedEventFilter;

    "LotteryOpened(uint256)"(roundNr?: null): LotteryOpenedEventFilter;
    LotteryOpened(roundNr?: null): LotteryOpenedEventFilter;

    "TicketsPurchased(uint256,address,uint256,uint256,uint256)"(
      roundNr?: null,
      player?: null,
      amount?: null,
      totalBets?: null,
      totalTickets?: null
    ): TicketsPurchasedEventFilter;
    TicketsPurchased(
      roundNr?: null,
      player?: null,
      amount?: null,
      totalBets?: null,
      totalTickets?: null
    ): TicketsPurchasedEventFilter;

    "TokensLiquified(uint256,uint256,uint256)"(
      amountToken?: null,
      amountETH?: null,
      liquidity?: null
    ): TokensLiquifiedEventFilter;
    TokensLiquified(
      amountToken?: null,
      amountETH?: null,
      liquidity?: null
    ): TokensLiquifiedEventFilter;

    "TreasuryClaimedMulti(address,uint256[])"(
      player?: null,
      amount?: null
    ): TreasuryClaimedMultiEventFilter;
    TreasuryClaimedMulti(
      player?: null,
      amount?: null
    ): TreasuryClaimedMultiEventFilter;

    "TreasuryClaimedSingle(address,uint256)"(
      player?: null,
      amount?: null
    ): TreasuryClaimedSingleEventFilter;
    TreasuryClaimedSingle(
      player?: null,
      amount?: null
    ): TreasuryClaimedSingleEventFilter;

    "WinnerClaimedPrizeMulti(address,uint256[])"(
      player?: null,
      rounds?: null
    ): WinnerClaimedPrizeMultiEventFilter;
    WinnerClaimedPrizeMulti(
      player?: null,
      rounds?: null
    ): WinnerClaimedPrizeMultiEventFilter;

    "WinnerClaimedPrizeSingle(address,uint256)"(
      player?: null,
      rounds?: null
    ): WinnerClaimedPrizeSingleEventFilter;
    WinnerClaimedPrizeSingle(
      player?: null,
      rounds?: null
    ): WinnerClaimedPrizeSingleEventFilter;
  };

  estimateGas: {
    BITMASK_LAST_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    BITMASK_PURCHASER(overrides?: CallOverrides): Promise<BigNumber>;

    BITPOS_LAST_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRewards(
      totalWinners: PromiseOrValue<BigNumberish>,
      totalAmount: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUpkeepVRF(
      status: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BigNumberish>,
      totalBets: PromiseOrValue<BigNumberish>,
      maxPlayers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BITMASK_LAST_INDEX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BITMASK_PURCHASER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BITPOS_LAST_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateRewards(
      totalWinners: PromiseOrValue<BigNumberish>,
      totalAmount: PromiseOrValue<BigNumberish>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkUpkeepVRF(
      status: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BigNumberish>,
      totalBets: PromiseOrValue<BigNumberish>,
      maxPlayers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
