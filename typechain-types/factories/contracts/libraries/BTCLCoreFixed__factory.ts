/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BTCLCoreFixed,
  BTCLCoreFixedInterface,
} from "../../../contracts/libraries/BTCLCoreFixed";

const _abi = [
  {
    inputs: [],
    name: "INVALID_VRF_REQUEST",
    type: "error",
  },
  {
    inputs: [],
    name: "LOTTERY_PAUSED",
    type: "error",
  },
  {
    inputs: [],
    name: "PRIZE_ALREADY_CLAIMED",
    type: "error",
  },
  {
    inputs: [],
    name: "ROUND_NOT_FINISHED",
    type: "error",
  },
  {
    inputs: [],
    name: "TRANSFER_FAILED",
    type: "error",
  },
  {
    inputs: [],
    name: "UNAUTHORIZED_WINNER",
    type: "error",
  },
  {
    inputs: [],
    name: "UPKEEP_FAILED",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "roundNr",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalTickets",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalPlayers",
        type: "uint256",
      },
    ],
    name: "LotteryClosed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "roundNr",
        type: "uint256",
      },
    ],
    name: "LotteryOpened",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "roundNr",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalBets",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalTickets",
        type: "uint256",
      },
    ],
    name: "TicketsPurchased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amountToken",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountETH",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    name: "TokensLiquified",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amount",
        type: "uint256[]",
      },
    ],
    name: "TreasuryClaimedMulti",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TreasuryClaimedSingle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "rounds",
        type: "uint256[]",
      },
    ],
    name: "WinnerClaimedPrizeMulti",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rounds",
        type: "uint256",
      },
    ],
    name: "WinnerClaimedPrizeSingle",
    type: "event",
  },
  {
    inputs: [],
    name: "BITMASK_LAST_INDEX",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BITMASK_PURCHASER",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BITPOS_LAST_INDEX",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "totalWinners",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "decimals",
        type: "uint256",
      },
    ],
    name: "calculateRewards",
    outputs: [
      {
        internalType: "uint256[]",
        name: "rewards",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum BTCLCoreFixed.Status",
        name: "status",
        type: "BTCLCoreFixed.Status",
      },
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalBets",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxPlayers",
        type: "uint256",
      },
    ],
    name: "checkUpkeepVRF",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type BTCLCoreFixedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BTCLCoreFixedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BTCLCoreFixed__factory extends ContractFactory {
  constructor(...args: BTCLCoreFixedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BTCLCoreFixed> {
    return super.deploy(overrides || {}) as Promise<BTCLCoreFixed>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BTCLCoreFixed {
    return super.attach(address) as BTCLCoreFixed;
  }
  override connect(signer: Signer): BTCLCoreFixed__factory {
    return super.connect(signer) as BTCLCoreFixed__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BTCLCoreFixedInterface {
    return new utils.Interface(_abi) as BTCLCoreFixedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BTCLCoreFixed {
    return new Contract(address, _abi, signerOrProvider) as BTCLCoreFixed;
  }
}
